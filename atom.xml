<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LLQ’s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-02-27T07:42:59.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>LLQ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>通过拦截hitTest:withEvent方法，解决超出父视图的子视图不能接受点击事件的问题</title>
    <link href="http://yoursite.com/2016/12/14/%E9%80%9A%E8%BF%87%E6%8B%A6%E6%88%AAhitTest-withEvent%E6%96%B9%E6%B3%95%EF%BC%8C%E8%A7%A3%E5%86%B3%E8%B6%85%E5%87%BA%E7%88%B6%E8%A7%86%E5%9B%BE%E7%9A%84%E5%AD%90%E8%A7%86%E5%9B%BE%E4%B8%8D%E8%83%BD%E6%8E%A5%E5%8F%97%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2016/12/14/通过拦截hitTest-withEvent方法，解决超出父视图的子视图不能接受点击事件的问题/</id>
    <published>2016-12-14T13:46:46.000Z</published>
    <updated>2017-02-27T07:42:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于项目需求，我需要在一个高度为50的控件上面创建一个下拉菜单，效果如下<br><img src="http://upload-images.jianshu.io/upload_images/1393645-7615f6291d98befb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="screenshot.png"><br>当我做完之后发现，下拉菜单的下拉选择项不能点击<br><img src="http://upload-images.jianshu.io/upload_images/1393645-95c2565295819887.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="screenshot.png"><br>这是因为我们的控件高度只有50，但是下拉菜单的高度超出了控件的大小，这样，我们就接受不到点击事件了<br>这边找了一个比较详细的图，来描述事件的分发<br><img src="http://upload-images.jianshu.io/upload_images/1393645-f33f808a87360846.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="226702-dd53b5a6df2f3ea5.png"><br>每个 view 都会有<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (UIView *)<span class="string">hitTest:</span>(CGPoint)point <span class="string">withEvent:</span>(UIEvent *)event&#123;</div><div class="line">    </div><div class="line">    UIView *view = [<span class="keyword">super</span> <span class="string">hitTest:</span>point <span class="string">withEvent:</span>event];</div><div class="line"></div><div class="line">    <span class="keyword">return</span> view;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样一个方法<br>这个方法会判断当前点击的“点”是否在本 view 上，如果在本 view 上，就继续寻找本 view 的 Subview，还是通过此方法判断点击的“点”是否在 Subview 上，直到找完所有的 Subview，然后这个方法就会 return 这个最终的 Subview 并一层层的向上传递给 UIWindow，这样我们就拿到了屏幕上面最终响应的 view。</p>
<p>回到我们最开始遇到的问题。</p>
<p>由于我们下拉菜单超出了我们的自定义控件，当我们点击到下拉菜单时，从 UIWindow 开始通过 <figure class="highlight plain"><figcaption><span>方法向下寻找响应的 view，当查找到我们的自定义控件时，就会 return 了，因为我们点击的“点”已经超出了自定义控件，也就是说，这个“点”不在我们的自定义控件上，所以在自定义控件上面的下拉菜单无论如何也不会响应。</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">所以，我们只要手动的去 return 我们的下拉菜单，手动的去连接起这个 响应 view 的链，我们的下拉菜单就能响应</div></pre></td></tr></table></figure></p>
<ul>
<li><p>(UIView <em>)getTargetView:(UIView </em>)view point:(CGPoint)point event:(UIEvent *)event<br>{</p>
<p>  __block UIView *subView;</p>
<p>  //逆序 由层级最低 也就是最上层的子视图开始<br>  [view.subviews enumerateObjectsWithOptions:NSEnumerationReverse usingBlock:^(__kindof UIView <em> _Nonnull obj, NSUInteger idx, BOOL </em> _Nonnull stop) {</p>
<pre><code>//point 从view 转到 obj中
CGPoint hitPoint = [obj convertPoint:point fromView:view];
//        NSLog(@&quot;%@ - %@&quot;,NSStringFromCGPoint(point),NSStringFromCGPoint(hitPoint));

if([obj pointInside:hitPoint withEvent:event])//在当前视图范围内
{
    if(obj.subviews.count != 0)
    {
        //如果有子视图 递归
        subView = [self getTargetView:obj point:hitPoint event:event];

        if(!subView)
        {
            //如果没找到 提交当前视图
            subView = obj;
        }
    }
    else
    {
        subView = obj;
    }

    *stop = YES;
}
else//不在当前视图范围内
{
    if(obj.subviews.count != 0)
    {
        //如果有子视图 递归
        subView = [self getTargetView:obj point:hitPoint event:event];
    }
}
</code></pre><p>  }];</p>
<p>  return subView;<br>}</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">这个方法的目的就是找到点击的“点”最终所在的 subview，然后 return。</div><div class="line"></div><div class="line">我们再回到我们的响应链断掉的地方，也就是自定义控件内的 ```hitTest``` 方法</div></pre></td></tr></table></figure>
</li>
<li><p>(UIView <em>)hitTest:(CGPoint)point withEvent:(UIEvent </em>)event{</p>
<p>  UIView *view = [super hitTest:point withEvent:event];</p>
<p>  //由于响应链在此处断开，我们就去手动寻找最终响应的子视图，传入本 view 遍历本 view 的子视图<br>  UIView *tempview = [self getTargetView:self point:point event:event];<br>  if (tempview) {</p>
<pre><code>view = tempview;
</code></pre><p>  }</p>
<p>  return view;<br>}<br>```<br>手动找到点击的点所在的 subview，并在断开的地方 return，这样我们的下拉菜单就能响应点击了</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于项目需求，我需要在一个高度为50的控件上面创建一个下拉菜单，效果如下&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1393645-7615f6291d98befb.png?imageMogr2/a
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Swift3.0利用Runtime简单封装一个字典转模型</title>
    <link href="http://yoursite.com/2016/11/16/Swift3-0%E5%88%A9%E7%94%A8Runtime%E7%AE%80%E5%8D%95%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AA%E5%AD%97%E5%85%B8%E8%BD%AC%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoursite.com/2016/11/16/Swift3-0利用Runtime简单封装一个字典转模型/</id>
    <published>2016-11-16T10:12:00.000Z</published>
    <updated>2017-02-27T07:38:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>在通常的项目中，我们经常会用到字典转 model 的操作，我们可以使用系统的<br><code>setValuesForKeys</code>（Swift）<br><code>setValuesForKeysWithDictionary</code>（OC）<br>方法来完成这一操作，但是这样就会遇到一个问题，如果我们数据字典其中的一个 key 与系统关键字重名，那我们在model中使用这个 key 作为属性就会报错，为了解决这一问题，我们会使用一些第三方库去完成字典转模型的操作，例如 MJExtension ，在这里，我们自己去封装一个简单的字典转模型，闲话不多说，我们马上开始。</p>
<p>首先我们去创建一个 BaseModel 类，我们在这个根类中去实现一个可以字典转自身属性的构造方法，只要我们自定义的 model 都继承这个 BaseModel 那么我们的 model 就都能使用这个构造方法完成字典转模型的操作啦~<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseModel</span>: <span class="title">NSObject</span> </span>&#123; </div><div class="line">    <span class="comment">//自定义构造方法</span></div><div class="line">    <span class="keyword">init</span>(dic: [<span class="type">String</span>:<span class="type">Any</span>]) &#123;</div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在，我们已经通过构造方法，拿到了数据字典，那么接下来我们只要将字典的键值对转换为我们自身的属性，就大功告成啦~<br>我们写一个新的方法，去完成这个操作<br>我们首先在这个方法中使用 Runtime 获取一下本类的所有属性<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">setAttribut</span><span class="params">(dic: [String:Any])</span></span> -&gt; <span class="type">Void</span> &#123;</div><div class="line">        <span class="comment">//Runtime获取本类属性</span></div><div class="line">        <span class="keyword">var</span> <span class="built_in">count</span>:<span class="type">UInt32</span> = <span class="number">0</span></div><div class="line">        <span class="keyword">let</span> ivars = class_copyIvarList(<span class="keyword">self</span>.classForCoder, &amp;<span class="built_in">count</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后我们遍历这个获取到的属性数组，取出其中的元素，并获得属性名，这里值得注意的是，我们获得的属性名是 C 语言字符串，这里我们要转换一下变成 Swift 字符串<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0.</span>.&lt;count &#123;</div><div class="line">         <span class="comment">//取出属性名</span></div><div class="line">         <span class="keyword">let</span> ivar = ivars?[Int(i)]</div><div class="line">         <span class="keyword">let</span> ivarName = ivar_getName(ivar!)</div><div class="line">         <span class="keyword">let</span> nName = <span class="built_in">String</span>(cString: ivarName!)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>进行到这一步，相信很多小伙伴已经明白其中的原理了，接下来，我们只要利用取到的属性名从我们的数据字典中取到相应的 value 然后赋值给我们的属性，我们的任务就完成了，但是这里，我们要解决我们刚开始遇到问题 “我们的属性名和字典的key值必须不相同怎么办？” 在这里我的解决办法是重新建立一个 model 属性与字典 key 值的映射关系，这里又写了一个建立映射的方法<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//如果属性名与数据字典的key值不对应，那么在子类model中复写此方法，将属性名作为key，字典key值作为value</span></div><div class="line">    func attributesDic(dic: <span class="type"></span>[<span class="keyword">String</span>:<span class="type">Any</span>]) -&gt; [<span class="keyword">String</span>:<span class="type">String</span>] &#123;</div><div class="line">        <span class="keyword">var</span> <span class="keyword">new</span><span class="type">Dic</span>:[<span class="keyword">String</span>:<span class="type">String</span>] = [:<span class="type"></span>]</div><div class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> dic.keys &#123;</div><div class="line">            <span class="comment">//复写时注意将属性名作为key 数据字典的key作为value</span></div><div class="line">            <span class="keyword">new</span><span class="type">Dic</span>[key] = key</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span><span class="type">Dic</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>在这个 BaseModel 父类中，我们先让数据字典所有的 key 映射为 key 本身，这样我们在复写这个方法时只修改 key 与属性不对应的映射就可以了。<br><strong>这里有特别注意的一点，在复写时，我们一定要用 super 首先调用一下这个方法。</strong></p>
<p>这样，我们的属性赋值方法就要修改了，我们要首先拿到数据字典的 key 与属性的全新映射关系<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">setAttribut</span><span class="params">(dic: [String:Any])</span></span> -&gt; <span class="type">Void</span> &#123;</div><div class="line">        <span class="comment">//获得映射关系</span></div><div class="line">        <span class="keyword">let</span> attributDic = attributesDic(dic: dic)        </div><div class="line">        <span class="comment">//Runtime获取本类属性</span></div><div class="line">        <span class="keyword">var</span> <span class="built_in">count</span>:<span class="type">UInt32</span> = <span class="number">0</span></div><div class="line">        <span class="keyword">let</span> ivars = class_copyIvarList(<span class="keyword">self</span>.classForCoder, &amp;<span class="built_in">count</span>)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="built_in">count</span> &#123;</div><div class="line">            <span class="comment">//取出属性名</span></div><div class="line">            <span class="keyword">let</span> ivar = ivars?[<span class="type">Int</span>(i)]</div><div class="line">            <span class="keyword">let</span> ivarName = ivar_getName(ivar!)</div><div class="line">            <span class="keyword">let</span> nName = <span class="type">String</span>(cString: ivarName!)</div><div class="line">        &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样一来我们离成功就只差一步了！！<br>我们需要将取到的属性名通过全新的映射关系取到数据字典的 key ，然后利用这个 key 从数据字典取到 value 最后将 value 赋值给我们 model  的属性<br>最后，我们的属性赋值方法变成了这样<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">setAttribut</span><span class="params">(dic: [String:Any])</span></span> -&gt; <span class="type">Void</span> &#123;</div><div class="line">        <span class="keyword">let</span> attributDic = attributesDic(dic: dic)</div><div class="line">        <span class="comment">//Runtime获取本类属性</span></div><div class="line">        <span class="keyword">var</span> <span class="built_in">count</span>:<span class="type">UInt32</span> = <span class="number">0</span></div><div class="line">        <span class="keyword">let</span> ivars = class_copyIvarList(<span class="keyword">self</span>.classForCoder, &amp;<span class="built_in">count</span>)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="built_in">count</span> &#123;</div><div class="line">            <span class="comment">//取出属性名</span></div><div class="line">            <span class="keyword">let</span> ivar = ivars?[<span class="type">Int</span>(i)]</div><div class="line">            <span class="keyword">let</span> ivarName = ivar_getName(ivar!)</div><div class="line">            <span class="keyword">let</span> nName = <span class="type">String</span>(cString: ivarName!)</div><div class="line">            <span class="comment">//取出要赋值的值</span></div><div class="line">            <span class="keyword">var</span> attribut = attributDic[nName]</div><div class="line">            <span class="keyword">if</span> attribut == <span class="literal">nil</span>&#123;</div><div class="line">                attribut = <span class="string">""</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">var</span> value:<span class="type">NSObject</span></div><div class="line">            <span class="keyword">if</span> dic[attribut!] != <span class="literal">nil</span> &#123;</div><div class="line">                value = dic[attribut!] <span class="keyword">as</span>! <span class="type">NSObject</span></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                value = <span class="string">""</span> <span class="keyword">as</span> <span class="type">NSObject</span></div><div class="line">            &#125;</div><div class="line">            <span class="comment">//利用KVC给本类的属性赋值</span></div><div class="line">            <span class="keyword">self</span>.setValue(value, forKey: nName)   </div><div class="line">        &#125;        </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h6 id="最后的最后"><a href="#最后的最后" class="headerlink" title="最后的最后"></a>最后的最后</h6><p>在我们自定义的初始化方法中调用一下<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//自定义构造方法</span></div><div class="line">    <span class="selector-tag">init</span>(<span class="attribute">dic</span>: [<span class="attribute">String</span>:Any]) &#123;</div><div class="line">        <span class="selector-tag">super</span><span class="selector-class">.init</span>()</div><div class="line">        <span class="selector-tag">setAttribut</span>(<span class="attribute">dic</span>: dic)</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>大功告成！！<br>这个封装好的 model 已经在我写的 Swift 小项目中得到了验证，这是项目地址<br><a href="https://github.com/li1024316925/Swift-TimeMovie" target="_blank" rel="external">时光电影Swift版初学小项目</a><br>本文如果有什么错误或者您有更好的方法，欢迎指出</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在通常的项目中，我们经常会用到字典转 model 的操作，我们可以使用系统的&lt;br&gt;&lt;code&gt;setValuesForKeys&lt;/code&gt;（Swift）&lt;br&gt;&lt;code&gt;setValuesForKeysWithDictionary&lt;/code&gt;（OC）&lt;br&gt;方法来完
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Swift3.0版时光电影项目笔记</title>
    <link href="http://yoursite.com/2016/10/18/Swift3.0%E7%89%88%E6%97%B6%E5%85%89%E7%94%B5%E5%BD%B1%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/10/18/Swift3.0版时光电影项目笔记/</id>
    <published>2016-10-18T05:03:04.000Z</published>
    <updated>2017-02-27T07:33:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>Swift 刚学几天，以练手的心态改写以前一个 OC 的小项目，这里记录一些遇到的坑点。由于是初学者，各位大牛如果发现错误，欢迎指出。闲话不多说，下面就正式开始</p>
<h1 id="1-私有属性和方法"><a href="#1-私有属性和方法" class="headerlink" title="1.私有属性和方法"></a>1.私有属性和方法</h1><p>在 Swift 中，是没有私有属性的，也就是说，只要在同一个命名空间（后面会有介绍），我们都可以访问的到。但是Swift中是有有 private 关键字的，根据特点决定，如果编写 App 的话，直接用默认的就好了，就是啥也不用敲，如果编写 Framework，请认真思考流程，认真设计，外部接口要设置 public，而一些不想让别人看见的就可以用 private 或者 internal 修饰了</p>
<h1 id="2-Swift中的宏定义"><a href="#2-Swift中的宏定义" class="headerlink" title="2.Swift中的宏定义"></a>2.Swift中的宏定义</h1><p>在Swift中是没有宏定义的，但是我们可以使用公用函数来替代宏，比如<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">func kTabBarWidth(<span class="class"><span class="keyword">object</span></span>: <span class="type">UITabBarController</span>) -&gt; <span class="type">CGFloat</span> &#123;<span class="keyword">return</span> <span class="class"><span class="keyword">object</span>.<span class="title">tabBar</span>.<span class="title">frame</span>.<span class="title">size</span>.<span class="title">width</span>&#125;</span></div><div class="line">func kTabBarHeight(<span class="class"><span class="keyword">object</span></span>: <span class="type">UITabBarController</span>) -&gt; <span class="type">CGFloat</span> &#123;<span class="keyword">return</span> <span class="class"><span class="keyword">object</span>.<span class="title">tabBar</span>.<span class="title">frame</span>.<span class="title">size</span>.<span class="title">height</span>&#125;</span></div><div class="line">func kButtonWidth(<span class="class"><span class="keyword">object</span></span>: <span class="type">UITabBarController</span>) -&gt; <span class="type">CGFloat</span> &#123;<span class="keyword">return</span> kTabBarWidth(<span class="class"><span class="keyword">object</span></span>: <span class="class"><span class="keyword">object</span>)<span class="title">/CGFloat</span>(<span class="params">(object.viewControllers?.count</span>)<span class="title">!</span>)&#125;</span></div></pre></td></tr></table></figure></p>
<p>在公用函数中取不到的变量我们可以以参数的形式传入</p>
<h1 id="3-Swift-中不同类型变量的运算"><a href="#3-Swift-中不同类型变量的运算" class="headerlink" title="3.Swift 中不同类型变量的运算"></a>3.Swift 中不同类型变量的运算</h1><p>Swift 是强语言，如果两个不同类型的相加，必须进行类型转换，比如<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="attr">num1</span> = <span class="number">10</span></div><div class="line"><span class="keyword">let</span> <span class="attr">num2</span> = <span class="number">9.9</span></div><div class="line"><span class="keyword">let</span> <span class="attr">iSum</span> = num1 + Int(num2)</div><div class="line"><span class="keyword">let</span> <span class="attr">dSum</span> = Double(num1) + num2</div></pre></td></tr></table></figure></p>
<h1 id="4-按钮添加点击事件"><a href="#4-按钮添加点击事件" class="headerlink" title="4.按钮添加点击事件"></a>4.按钮添加点击事件</h1><p>为按钮添加点击事件，这里使用的是#Selector(方法名)的样式<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//按钮添加点击事件</span></div><div class="line"><span class="selector-tag">button</span>.addTarget(self, action: #selector(selectedVC(<span class="selector-tag">button</span>:)), <span class="keyword">for</span>: UIControlEvents.touchUpInside)</div></pre></td></tr></table></figure></p>
<p>值得注意的是，我们后面的按钮点击方式的枚举类型应该用<br>枚举名+“.”+枚举值<br>的方式来调用</p>
<h1 id="5-闭包中的self与循环引用"><a href="#5-闭包中的self与循环引用" class="headerlink" title="5.闭包中的self与循环引用"></a>5.闭包中的self与循环引用</h1><p>Swift 中的闭包，也就是 OC 中的 Block ，怎么使用这里就不多叙述了，我们这里要说的，是要特别注意的点<br>在闭包中使用本类的属性或调用方法，必须使用Self调用，这样的话，就产生了循环引用的问题，和OC中相差不多，我们利用一个 weak 关键字来解决这一问题<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">let homeViewModel = HomeViewModel()</div><div class="line">weak <span class="selector-tag">var</span> weakSelf = self</div><div class="line">homeViewModel<span class="selector-class">.loadMovieData</span> &#123; (data) <span class="keyword">in</span></div><div class="line">    weakSelf!<span class="selector-class">.dataList</span> = data</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="6-Swift中的命名空间"><a href="#6-Swift中的命名空间" class="headerlink" title="6.Swift中的命名空间"></a>6.Swift中的命名空间</h1><p>Objective-C 是没有命名空间的，在应用开发时，所有的代码和引用的静态库最终都会被编译到同一个域和二进制中。这样的后果是一旦我们有重复的类名的话，就会导致编译时的冲突和失败。在 Swift 中，由于可以使用命名空间了，即使是名字相同的类型，只要是来自不同的命名空间的话，都是可以和平共处的。Swift 中的命名空间的使用不是一个项目,而是需要跨项目,在一个项目中,都是一个命名空间,在同一个命名空间下,所有全局变量或者函数共享,不需要 import<br>我们项目中使用到了命名空间，在我们动态创建控制器的时候<br><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> imgNames = [<span class="string">"home"</span>,<span class="string">"payticket"</span>,<span class="string">"store"</span>,<span class="string">"discover"</span>,<span class="string">"myinfo"</span>]</div><div class="line"><span class="comment">//创建标签控制器数组存储标签控制器名</span></div><div class="line"><span class="keyword">let</span> viewContorllersArray = [<span class="string">"HomeViewController"</span>,<span class="string">"PayTicketViewController"</span>,<span class="string">"StoreViewController"</span>,<span class="string">"DiscoverViewController"</span>,<span class="string">"MyInfoViewController"</span>]</div><div class="line">        </div><div class="line">var bnvVcArray:[UIViewController] = []</div><div class="line">        </div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0.</span>.&lt;<span class="number">5</span> &#123;</div><div class="line">    <span class="keyword">let</span> str = viewContorllersArray[i]</div><div class="line">    <span class="comment">//通过一个字符串创建控制器对象</span></div><div class="line">    <span class="comment">//获取命名空间</span></div><div class="line">    <span class="comment">//namespace在info.plist 对应的是 CFBundleExecutable,我们可以在info.plist中任意右击一行,选中Show Raw Keys/Values</span></div><div class="line">    <span class="keyword">let</span> <span class="keyword">namespace</span> = Bundle.main.infoDictionary![<span class="string">"CFBundleExecutable"</span>] <span class="keyword">as</span>! String</div><div class="line">    <span class="keyword">let</span> uivcType = NSClassFromString(<span class="keyword">namespace</span> + <span class="string">"."</span> + str) <span class="keyword">as</span>? UIViewController.Type</div><div class="line">    <span class="comment">//可选绑定</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> <span class="class"><span class="keyword">type</span> </span>= uivcType &#123;</div><div class="line">        <span class="comment">//创建</span></div><div class="line">        <span class="keyword">let</span> uiVC = <span class="class"><span class="keyword">type</span>.<span class="title">init</span></span>()</div><div class="line">        uiVC.tabBarItem.selectedImage = UIImage(named: imgNames[i] + <span class="string">"_on"</span>)</div><div class="line">        uiVC.tabBarItem.image = UIImage(named: imgNames[i])</div><div class="line">        uiVC.title = imgNames[i]</div><div class="line">        <span class="keyword">let</span> bnv = BaseNavViewController(rootViewController: uiVC)</div><div class="line">        bnvVcArray.append(bnv)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果新建项目时，项目名称中包含有中文，可以进入是 Build Settings 中选中 “All” ，搜索 product name ，即可修改命名空间，如图:<br><img src="http://upload-images.jianshu.io/upload_images/1393645-21279dec8e9096b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2373BC66-3171-4EE9-998F-D715DD43D680.png"></p>
<h1 id="7-使用-Runtime-实现字典转模型"><a href="#7-使用-Runtime-实现字典转模型" class="headerlink" title="7.使用 Runtime 实现字典转模型"></a>7.使用 Runtime 实现字典转模型</h1><p>我们在项目中自定义了一个 BaseModel 自定义了一个构造方法传入一个字典，来方便的实现字典转模型，在实现过程中，我们在 Swift 中使用了 Runtime<br>我们知道 OC 是动态语言，能够通过 runtime API 调用和替换任意方法，纯 Swift 类的函数调用已经不再是 OC 的运行时发消息，而是在编译时就确定了调用哪个函数，所以没法通过 runtime 获取方法、属性，而Swift为了兼容 OC ，凡是继承自 NSObject 的类都会保留其动态性，所以我们能通过 runtime 拿到继承与 NSObject 的类的方法和属性<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">setAttribut</span><span class="params">(dic: [String:Any])</span></span> -&gt; <span class="type">Void</span> &#123;</div><div class="line">    <span class="keyword">let</span> attributDic = attributesDic(dic: dic)</div><div class="line">    </div><div class="line">    <span class="comment">//Runtime获取本类属性</span></div><div class="line">    <span class="keyword">var</span> <span class="built_in">count</span>:<span class="type">UInt32</span> = <span class="number">0</span></div><div class="line">    <span class="keyword">let</span> ivars = class_copyIvarList(<span class="keyword">self</span>.classForCoder, &amp;<span class="built_in">count</span>)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="built_in">count</span> &#123;</div><div class="line">        <span class="comment">//取出属性名</span></div><div class="line">        <span class="keyword">let</span> ivar = ivars?[<span class="type">Int</span>(i)]</div><div class="line">        <span class="keyword">let</span> ivarName = ivar_getName(ivar!)</div><div class="line">        <span class="keyword">let</span> nName = <span class="type">String</span>(cString: ivarName!)</div><div class="line">        <span class="comment">//取出要赋值的值</span></div><div class="line">        <span class="keyword">let</span> attribut = attributDic[nName]</div><div class="line">        <span class="keyword">var</span> value:<span class="type">NSObject</span></div><div class="line">        <span class="keyword">if</span> dic[attribut!] != <span class="literal">nil</span> &#123;</div><div class="line">            value = dic[attribut!] <span class="keyword">as</span>! <span class="type">NSObject</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            value = <span class="string">""</span> <span class="keyword">as</span> <span class="type">NSObject</span></div><div class="line">        &#125;   </div><div class="line"> </div><div class="line">        <span class="comment">//利用KVC给本类的属性赋值</span></div><div class="line">        <span class="keyword">self</span>.setValue(value, forKey: nName)</div><div class="line">           </div><div class="line">    &#125;</div><div class="line">        </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="8-Swift-中的异常处理"><a href="#8-Swift-中的异常处理" class="headerlink" title="8.Swift 中的异常处理"></a>8.Swift 中的异常处理</h1><p>在 OC 中调用方法时，通常是通过一个 NSError 参数来返回异常信息的，但是在Swift中返回异常的方式就有些不同了。下面，我们自定义一个返回异常的函数，并且调用这个函数<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义一个抛出异常的方法</span></div><div class="line"><span class="comment">//在一切正常的情况下，返回值是String类型，</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">someFunctionWhichCanFail</span><span class="params">(param: Int)</span></span> <span class="keyword">throws</span> -&gt; <span class="type">String</span> &#123;       </div><div class="line">    <span class="keyword">if</span> param &gt; <span class="number">0</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"成功"</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="type">NSError</span>(domain: <span class="string">"啦啦啦，失败了"</span>, code: <span class="number">499</span>, userInfo: <span class="literal">nil</span>)</div><div class="line">    &#125;   </div><div class="line">&#125;</div><div class="line"><span class="comment">//do-try-catch这种错误模式，本意就是尝试（try）做一件事情，如果失败则捕获（catch）处理。</span></div><div class="line"><span class="comment">//要注意的是你可以在 do 代码段中写多于一行的代码(并且 try 可以调用不止一个抛错误的方法)。如果一切顺利的话，将会像预期的那样执行那些方法，但是一旦方法出错就会跳出 do 代码段，进入 catch 处。</span></div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">    <span class="comment">//尝试做一件事情</span></div><div class="line">    <span class="keyword">let</span> result = <span class="keyword">try</span> someFunctionWhichCanFail(param: -<span class="number">1</span>)</div><div class="line">    <span class="built_in">print</span>(<span class="string">"<span class="subst">\(result)</span>"</span>)</div><div class="line">&#125; <span class="keyword">catch</span> <span class="keyword">let</span> error &#123;</div><div class="line">    <span class="comment">//在catch中捕获错误信息</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"<span class="subst">\(error)</span>"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样，我们就基本明白了 Swift 中处理异常的基本方式，再看我们的项目。<br>在项目中，我们封装了一个JSON文件解析类，这个类有一个方法，传入JSON文件名，返回一个解析好的字典或是数组<br><figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">jsonObjectFromFileName</span>(<span class="title">fileName</span>: <span class="title">String</span>) -&gt; <span class="title">NSDictionary</span>? &#123;</span></div><div class="line">    <span class="comment">//获取文件路径</span></div><div class="line">    <span class="keyword">let</span> path = <span class="type">Bundle</span>.main.path(forResource: fileName, ofType: <span class="string">"json"</span>)</div><div class="line">    <span class="comment">//解析</span></div><div class="line">    <span class="keyword">let</span> data = <span class="type">NSData</span>.init(contentsOfFile: path!)</div><div class="line">    <span class="keyword">let</span> dic = <span class="keyword">try</span>! <span class="type">JSONSerialization</span>.jsonObject(<span class="keyword">with</span>: data! <span class="keyword">as</span> <span class="type">Data</span>, options: <span class="type">JSONSerialization</span>.<span class="type">ReadingOptions</span>.allowFragments) <span class="keyword">as</span>? <span class="type">NSDictionary</span></div><div class="line">        </div><div class="line">    <span class="keyword">return</span> dic</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里的<br>JSONSerialization.jsonObject(with: data! as Data, options: JSONSerialization.ReadingOptions.allowFragments)<br>方法是要求我们必须捕获一个异常的，我们这里代码中使用了一个 try! 关键字，这里还可以使用 try? 关键字。try? 会将错误转换为可选值，当调用 try? ＋函数或方法语句 的时候，如果函数或方法抛出错误，程序不会发崩溃，而返回一个nil，如果没有抛出错误则返回可选值，不会含有更多的造成特定的错误或者异常原因的信息。try! 打破了错误传播链条，但是如果真的发生错误就出现运行期错误，导致程序的崩溃。所以使用 try! 打破错误传播链条时，应该确保程序不会发生错误</p>
<h1 id="9-Swift-项目中使用-CocoaPods"><a href="#9-Swift-项目中使用-CocoaPods" class="headerlink" title="9.Swift 项目中使用 CocoaPods"></a>9.Swift 项目中使用 CocoaPods</h1><p>Swift 项目中使用 Cocoapods 导入第三方库，导入的过程与 OC 项目无异，但是使用时，需要创建一个 Bridging-Header.h 桥接头文件，来实现 OC 与 Swift 混编<br><img src="http://upload-images.jianshu.io/upload_images/1393645-8fd9129efb896ad0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="screenshot.png"><br>可以在Building Settings中自己设置桥接头文件</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1393645-e2e655391285c0e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="screenshot 2.png"><br>这里有个简便方法生成这个桥接文件，就是我们在项目中创建一个 OC 文件，Xcode就会自动帮我们生成一个桥接头文件<br>有了头文件之后，我们只需要在桥接文件中导入我们需要使用的第三方库，就可以愉快的使用了~~~~</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1393645-b04706b707d455a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="screenshot 3.png"></p>
<h1 id="10-子类实现父类的代理方法"><a href="#10-子类实现父类的代理方法" class="headerlink" title="10.子类实现父类的代理方法"></a>10.子类实现父类的代理方法</h1><p>在这里，让我们首先看项目中的例子<br>我们声明了一个 BaseCollectionView 继承于 UICollectionView ，并将代理设置为自己<br><img src="http://upload-images.jianshu.io/upload_images/1393645-169020eb03fefbee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="screenshot.png"><br>然后我们又声明了一个 PosterCollectionView 继承了BaseCollectionView<br><img src="http://upload-images.jianshu.io/upload_images/1393645-b245fda051861ade.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="screenshot.png"><br>在 OC 中，我们想要在 PosterCollectionView 里实现 UICollectionView 的 delegate 方法，那么直接在子类 PosterCollectionView 中书写就可以了，但是在Swift中，我们需要在父类 BaseCollectionView 中实现，然后在子类 PosterCollectionView 中重写</p>
<p>父类：<br><img src="http://upload-images.jianshu.io/upload_images/1393645-25cdf09067afd92c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="screenshot.png"><br>子类：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1393645-b209ec1954c829e2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="screenshot.png"></p>
<h1 id="11-Swift-中的-KVO"><a href="#11-Swift-中的-KVO" class="headerlink" title="11.Swift 中的 KVO"></a>11.Swift 中的 KVO</h1><p>Swift 中的 KVO 使用与 OC 相差不多，但是还是有一些坑点，下面我们只是简单的说一下<br>1.观察者和被观察者都必须是 NSObject 的子类，因为 OC 中 KVO 的实现基于 KVC 和 runtime 机制，只有是 NSObject 的子类才能利用这些特性<br>2.要观察的属性使用 @dynamic 修饰，表示该属性的存取都由 runtime 在运行时来决定，由于 Swift 基于效率的考量默认禁止了动态派发机制，因此要加上该修饰符来开启动态派发<br>这里是项目中的实现代码<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//被观察的属性，加dynamic关键字</span></div><div class="line"><span class="comment">//记录下标</span></div><div class="line"><span class="keyword">dynamic</span> <span class="keyword">var</span> currentIndex:<span class="built_in">Int</span> = <span class="number">0</span></div></pre></td></tr></table></figure></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//添加监听</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">addObserver</span><span class="params">()</span></span> -&gt; <span class="type">Void</span> &#123;</div><div class="line">        </div><div class="line">        <span class="comment">//添加indexCollectionView的监听</span></div><div class="line">        indexCollectionView?.addObserver(<span class="keyword">self</span>, forKeyPath: <span class="string">"currentIndex"</span>, options: <span class="type">NSKeyValueObservingOptions</span>.new, context: <span class="literal">nil</span>)</div><div class="line">        </div><div class="line">        <span class="comment">//添加posterCollectionView的监听</span></div><div class="line">        posterCollectionView?.addObserver(<span class="keyword">self</span>, forKeyPath: <span class="string">"currentIndex"</span>, options: <span class="type">NSKeyValueObservingOptions</span>.new, context: <span class="literal">nil</span>)</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//观察者方法</span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">observeValue</span><span class="params">(forKeyPath keyPath: String?, of object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?)</span></span> &#123;</div><div class="line">        </div><div class="line">        <span class="comment">//变化后的值</span></div><div class="line">        <span class="keyword">let</span> index = change?[<span class="type">NSKeyValueChangeKey</span>.newKey] <span class="keyword">as</span>! <span class="type">Int</span></div><div class="line">        </div><div class="line">        <span class="comment">//创建indexPath</span></div><div class="line">        <span class="keyword">let</span> indexPath = <span class="type">IndexPath</span>(item: index, section: <span class="number">0</span>)</div><div class="line">        </div><div class="line">        <span class="comment">//判断是否是currenIndex属性</span></div><div class="line">        <span class="keyword">guard</span> keyPath == <span class="string">"currentIndex"</span> <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//判断对象的类型</span></div><div class="line">        <span class="keyword">if</span> object <span class="keyword">is</span> <span class="type">PosterCollectionView</span> &#123;</div><div class="line">            </div><div class="line">            <span class="comment">//滑动到指定单元格</span></div><div class="line">            indexCollectionView?.scrollToItem(at: indexPath, at: <span class="type">UICollectionViewScrollPosition</span>.centeredHorizontally, animated: <span class="literal">true</span>)</div><div class="line">            </div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> object <span class="keyword">is</span> <span class="type">IndexCollectionView</span>&#123;</div><div class="line">            </div><div class="line">            <span class="comment">//滑动到指定单元格</span></div><div class="line">            posterCollectionView?.scrollToItem(at: indexPath, at: <span class="type">UICollectionViewScrollPosition</span>.centeredHorizontally, animated: <span class="literal">true</span>)</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//变换标题</span></div><div class="line">        titleLabel?.text = dataList?[index].titleCn</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//销毁</span></div><div class="line">    <span class="keyword">deinit</span> &#123;</div><div class="line">        <span class="comment">//移除观察者</span></div><div class="line">        indexCollectionView?.removeObserver(<span class="keyword">self</span>, forKeyPath: <span class="string">"currentIndex"</span>)</div><div class="line">        posterCollectionView?.removeObserver(<span class="keyword">self</span>, forKeyPath: <span class="string">"currentIndex"</span>)</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这里注意一定要在析构函数中移除监听<br>如果你还对 Swift 中的 KVO 感兴趣的话，可以看一下这篇文章<br><a href="http://www.jianshu.com/p/e036e53d240e" target="_blank" rel="external">Swift: KVO 注意事项和属性观察器</a></p>
<p>在最后，放上小项目的地址，还是那句话，说再多也不如自己敲一敲<br><a href="https://github.com/li1024316925/Swift-TimeMovie" target="_blank" rel="external">时光电影Swift版初学小项目</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Swift 刚学几天，以练手的心态改写以前一个 OC 的小项目，这里记录一些遇到的坑点。由于是初学者，各位大牛如果发现错误，欢迎指出。闲话不多说，下面就正式开始&lt;/p&gt;
&lt;h1 id=&quot;1-私有属性和方法&quot;&gt;&lt;a href=&quot;#1-私有属性和方法&quot; class=&quot;heade
    
    </summary>
    
    
  </entry>
  
</feed>
